package org.pk.oauth2.client.resource;

import java.io.StringWriter;
import java.nio.charset.Charset;
import java.util.Base64;
import java.util.HashMap;
import java.util.Map;

import org.springframework.http.HttpHeaders;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.client.RestTemplate;

import com.fasterxml.jackson.databind.ObjectMapper;

@Controller
@RequestMapping("/client")
public class ClientResource {
	private String authCode = null;
	private String token = null;
	
	@GetMapping("/code")
	@ResponseBody
	public String authCode(@RequestParam("code") String authCode) {
		this.authCode = authCode;
		return authCode;
	}
	
	@GetMapping("/token")
	@ResponseBody
	public String token() throws Exception {
		RestTemplate template = new RestTemplate();
		Map<String, String> request = new HashMap<>();
		request.put("grant_type", "authorization_code");
		request.put("client_id", "myclient");
		request.put("client_secret", "secret");
		request.put("code", authCode);
		request.put("redirect_uri", "http://localhost:8080/client/code");
		
		ObjectMapper mapper = new ObjectMapper();
		StringWriter writer = new StringWriter();
		mapper.writeValue(writer, request);
		
		System.out.println("*****" + writer.toString());
		
		restTemplate.exchange
		 (uri, HttpMethod.POST, new HttpEntity<T>(createHeaders(username, password)), clazz);
		
		String response = template.postForEntity("http://localhost:8081/oauth/token", writer.toString(), String.class).getBody();
		//this.token = response.get("access_token");
		return response;
	}
	
	HttpHeaders createHeaders(String username, String password){
		   return new HttpHeaders() {{
		         String auth = username + ":" + password;
		         byte[] encodedAuth = Base64.getEncoder().encode( 
		            auth.getBytes(Charset.forName("US-ASCII")) );
		         String authHeader = "Basic " + new String( encodedAuth );
		         set( "Authorization", authHeader );
		      }};
		}
}